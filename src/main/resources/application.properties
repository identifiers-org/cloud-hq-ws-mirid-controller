spring.profiles.active=${HQ_WS_MIRID_CONTROLLER_CONFIG_APPLICATION_ACTIVE_PROFILE:authenabled}
spring.application.name=hq-ws-mirid-controller
server.port=8181
# Data source (for this iteration we'll be using a PostgreSQL backend)
spring.datasource.url=${HQ_WS_MIRID_CONTROLLER_CONFIG_JDBC_URL:jdbc:postgresql://127.0.0.1:5431/devdatabase}
spring.datasource.username=${HQ_WS_MIRID_CONTROLLER_CONFIG_RDBMS_USERNAME:devusername}
spring.datasource.password=${HQ_WS_MIRID_CONTROLLER_CONFIG_RDBMS_PASSWORD:devpassword}
spring.jpa.hibernate.ddl-auto=update
# There is a problem with Atomikos trying to autodetect the features of our PostgreSQL, that makes the application
# crash, so we need to use this shady undocumented way of working around it
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL9Dialect
spring.data.rest.base-path=restApi
# Redis Configuration
spring.redis.host=${HQ_WS_MIRID_CONTROLLER_CONFIG_REDIS_HOST:localhost}
spring.redis.port=${HQ_WS_MIRID_CONTROLLER_CONFIG_REDIS_PORT:6379}